<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Algorithm之三分钟解读Spline]]></title>
    <url>%2Fposts%2F2019%2F11%2F14%2Falgorithm%E4%B9%8B%E4%B8%89%E5%88%86%E9%92%9F%E8%A7%A3%E8%AF%BBspline%2F</url>
    <content type="text"><![CDATA[三次样条插值作为离散数学中的一种较为普遍的插值算法，常常被用在工业中的方方面面，下面略作介绍。代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307#include &lt;iostream&gt;#include&lt;math.h&gt;using namespace std;/** * spline function * * @param x [in] array of x-coordinate of control points * @param y [in] array of y-coordinate of control points * @param n [in] count of control points * @param t [in] array of x-coordinate of output points * @param m [in] count of output points * @param z [out] array of y-coordinate of output points */double spline(double *x, double *y, int n, double *t, int m, double *z)&#123; double* dy = new double[n]; memset(dy, 0, sizeof(double)*n); dy[0] = -0.5; double* ddy = new double[n]; memset(ddy, 0, sizeof(double)*n); double h1; double* s = new double[n]; double h0 = x[1] - x[0]; s[0] = 3.0 * (y[1] - y[0]) / (2.0 * h0) - ddy[0] * h0 / 4.0; for (int j = 1; j &lt;= n - 2; ++j) &#123; h1 = x[j + 1] - x[j]; double alpha = h0 / (h0 + h1); double beta = (1.0 - alpha) * (y[j] - y[j - 1]) / h0; beta = 3.0 * (beta + alpha * (y[j + 1] - y[j]) / h1); dy[j] = -alpha / (2.0 + (1.0 - alpha) * dy[j - 1]); s[j] = (beta - (1.0 - alpha) * s[j - 1]); s[j] = s[j] / (2.0 + (1.0 - alpha) * dy[j - 1]); h0 = h1; &#125; dy[n - 1] = (3.0*(y[n - 1] - y[n - 2]) / h1 + ddy[n - 1] * h1 / 2.0 - s[n - 2]) / (2.0 + dy[n - 2]); for (int j = n - 2; j &gt;= 0; --j) &#123; dy[j] = dy[j] * dy[j + 1] + s[j]; &#125; for (int j = 0; j &lt;= n - 2; ++j) &#123; s[j] = x[j + 1] - x[j]; &#125; for (int j = 0; j &lt;= n - 2; ++j) &#123; h1 = s[j] * s[j]; ddy[j] = 6.0 * (y[j + 1] - y[j]) / h1 - 2.0 * (2.0 * dy[j] + dy[j + 1]) / s[j]; &#125; h1 = s[n - 2] * s[n - 2]; ddy[n - 1] = 6.0 * (y[n - 2] - y[n - 1]) / h1 + 2.0 * (2.0 * dy[n - 1] + dy[n - 2]) / s[n - 2]; double g = 0.0; for (int i = 0; i &lt;= n - 2; i++) &#123; h1 = 0.5 * s[i] * (y[i] + y[i + 1]); h1 = h1 - s[i] * s[i] * s[i] * (ddy[i] + ddy[i + 1]) / 24.0; g = g + h1; &#125; for (int j = 0; j &lt;= m - 1; j++) &#123; int i; if (t[j] &gt;= x[n - 1]) &#123; i = n - 2; &#125; else &#123; i = 0; while (t[j] &gt; x[i + 1]) &#123; i = i + 1; &#125; &#125; h1 = (x[i + 1] - t[j]) / s[i]; h0 = h1 * h1; z[j] = (3.0 * h0 - 2.0 * h0 * h1) * y[i]; z[j] = z[j] + s[i] * (h0 - h0 * h1) * dy[i]; h1 = (t[j] - x[i]) / s[i]; h0 = h1 * h1; z[j] = z[j] + (3.0 * h0 - 2.0 * h0 * h1) * y[i + 1]; z[j] = z[j] - s[i] * (h0 - h0 * h1) * dy[i + 1]; &#125; delete[] s; delete[] dy; delete[] ddy; return(g);&#125;int main()&#123; double xData[5] = &#123; 1.2,2.3,3.5,4.7,6.4 &#125;; double yData[5] = &#123; 3.4,5.9,7.3,2.8,9.1 &#125;; double xDst[2] = &#123; 9.2,7.8 &#125;; double yDst[2]; spline(xData, yData, 5, xDst, 2, yDst);#if 0 double a[21][3];//第一列已知点的横坐标，2.3列是其二者之差 double b[21];//已知点纵坐标 double h[21];//存放步长 double c1[21];//μ double c2[21];//λ double c3[21];//β double c4[21];//Ly=f,存放y的值 double d[21];//d double M[21];//Ux=y,存放x的值，也就是原方程要求出的M double x[25] = &#123; -5,-4.75,-4.5,-4.25,-4,-3.75,-3.5,-3.25,-3,-2.75,-2.5,-2.25, -2,-1.75,-1.5,-1.25,-1,-0.75,-0.5,-0.25,0 &#125;;//原始函数横坐标 double y[25];//三次样条所得计算值 double z[25];//函数横坐标对应的值 double r[25];//三次样条计算值与原函数值相对误差 int k; cout &lt;&lt; "请输入本次实验您使用的等距节点的个数："; cin &gt;&gt; k; cout &lt;&lt; "请输入已知点的坐标(x,y):" &lt;&lt; endl; for (int i = 0; i &lt;= k; i++) &#123; cin &gt;&gt; b[i] &gt;&gt; a[i][0]; if (i &gt;= 1) &#123; h[i - 1] = b[i] - b[i - 1]; &#125; &#125; for (int i = 0; i &lt;= k; i++) &#123; if (i == 0) &#123; c2[0] = 1; &#125; else if (i == k) &#123; c1[k] = 1; &#125; else &#123; c1[i] = h[i - 1] / (h[i - 1] + h[i]); c2[i] = h[i] / (h[i - 1] + h[i]); &#125; &#125; //2阶均差的计算 for (int j = 1; j &lt; 3; j++) &#123; for (int i = j; i &lt;= k; i++) &#123; a[i][j] = (a[i][j - 1] - a[i - 1][j - 1]) / (b[i] - b[i - j]); &#125; &#125; for (int i = 0; i &lt;= k; i++) &#123; if (i == 0) d[i] = (6 * (a[1][1] - 5 / 338)) / h[i];// 5/338是函数在x0处的导数值 else if (i == k) d[i] = (6 * (5 / 338 - a[k][1])) / h[i - 1]; else d[i] = 6 * a[2][i]; &#125; //追赶法解对角占优矩阵 for (int i = 0; i &lt;= k; i++) &#123; if (i == 0) &#123; c3[0] = c2[0] / 2; //2是对角占优矩阵对角线的第一个元素 c4[0] = d[0] / 2; &#125; else if (i &lt; k) &#123; c3[i] = c2[i] / (2 - c1[i] * c3[i - 1]); c4[i] = (d[i] - c1[i] * c4[i - 1]) / (2 - c1[i] * c3[i - 1]); &#125; else if (i == k) &#123; c4[i] = (d[i] - c1[i] * c4[i - 1]) / (2 - c1[i] * c3[i - 1]); M[k] = c4[k]; &#125; &#125; for (int i = k - 1; i &gt;= 0; i--) &#123; M[i] = c4[i] - c3[i] * M[i + 1]; &#125; //利用所得写出三次样条表达式并计算函数值，并与原函数值进行比较 for (int i = 0; i &lt; 21; i++) &#123; int j = 0; for (int w = 0; w &lt; k; w++) &#123; if ((x[i] &gt;= b[w]) &amp;&amp; (x[i] &lt; b[w + 1])) j = w; &#125; y[i] = M[j] * (b[j] - x[i])*(b[j] - x[i])*(b[j] - x[i]) / (6 * h[j] + M[j + 1] * (x[i] - b[j])*(x[i] - b[j])*(x[i] - b[j]) / (6 * h[j] + (a[j][0] - (M[j] * h[j] * h[j] / 6))*((b[j + 1] - x[i]) / h[j]) + (a[j + 1][0] - (M[j + 1] * h[j] * h[j] / 6))*((x[i] - b[j]) / h[j]))); z[i] = 1 / (x[i] * x[i] + 1); r[i] = fabs((y[i] - z[i]) / z[i]); //cout &lt;&lt; "x的值：" &lt;&lt; x[i] &lt;&lt; " 理论值：" &lt;&lt; z[i] &lt;&lt; " 计算所得：" &lt;&lt; y[i] &lt;&lt; " 误差为：" &lt;&lt; r[i] &lt;&lt; endl; printf("x[%d]的值：%f,\t理论值：%f\t,计算所得：%f\t,误差为：%f\t\n", i, x[i], z[i], y[i], r[i]); &#125;#endif for (int i = 0; i &lt; 2; i++) &#123; printf("yDst[%d] = %lf\n", i, yDst[i]); &#125; system("pause"); return 0;&#125;]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于阿里云数加构建企业级数据分析平台]]></title>
    <url>%2Fposts%2F2019%2F10%2F26%2F%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E6%95%B0%E5%8A%A0%E6%9E%84%E5%BB%BA%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[Contents数据分析介绍阿里云数加介绍常用的数加产品任务：搭建企业级的数据分析平台数据分析介绍数据分析是基于商业目的，有目的的进行收集、整理、加工和分析数据，提炼有价值信息的过程。明确目的、数据收集、数据处理、数据分析、数据展现、分析报告。数据分析的目的：获得用户、留住用户、增加收益；市场营销、产品运营、客户服务；业务优化、流程改进、发现机会。数据分析平台组成部分：（数据存储组织）源数据、数据仓库、数据应用处理过程：分析需求、确认数据源、ETL处理、数据整合、数据建模、分析展现阿里云数加介绍数加是阿里云大数据的品牌名，旗下包含一系列的大数据产品及服务，是上万名工程师实战检验过程的一站式大数据平台。数加是阿里云大数据的核心能力。数据采集：PC、APP、WI-FI、基站、工业传感器、手环手表计算引擎：大规模计算、实时计算、流式计算数据加工：SQL、MR、Shell、图形化数据分析：Report、Dilldown、拖拽机器学习：决策树、聚类、神经网络、支持向量机数据应用：广告推荐、定向推销、医疗、体育、金融数加平台发展历程：2009.09 阿里云成立2010.04 自主研发Maxcompute平台2012.07 成立数据事业部2013.08 5K集群规模2014 大数据平台日趋成熟2016.01 数加平台常用的数加产品MaxCompute：提供针对TB/PB级数据、实时性要求不高的分布式处理能力DataIDE：基于Max Compute、一站式数据开发、清晰可见的血缘、可视化开发界面QuickBI：海量数据实时在线分析，多快好省常见的应用场景：从业务系统到数据分析任务：搭建企业级的数据分析平台]]></content>
      <tags>
        <tag>-大数据 -阿里云 -数据分析平台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[李清照词传札记]]></title>
    <url>%2Fposts%2F2019%2F9%2F24%2F%E6%9D%8E%E6%B8%85%E7%85%A7%E8%AF%8D%E4%BC%A0%E6%9C%AD%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[半世烟雨，半世落花……“词苑千载，群芳竞艳，盛开一枝女儿花。”这枝花在宋代萌发，绚烂了中国诗词的整个花季。飘散淡淡清香的诗笺上，有她的聪颖与傲骨，柔情与相似，坚强与悲戚……她摇曳生姿地走来，行于汴京，行于青州，行于金华，行于中华五千年的灿烂文化，带来的是璀璨华章，锦瑟流年。她用沾满诗香的笔墨描绘出一个春暖花开的人间。常记溪亭日暮，沉醉不知归路。兴尽晚回舟，误入藕花深处。争渡，争渡，惊起一滩鸥鹭。——《如梦令》昨夜雨疏风骤，浓睡不消残酒。试问卷帘人，却道海棠依旧。知否？知否？应是绿肥红瘦。——《如梦令》湖上风来波浩渺，秋已暮、红稀香少。水光山色与人亲，说不尽、无穷好。莲子已成荷叶老，清露洗、频花汀草。眠沙鸥鹭不回头，似也恨、人归早。——《怨王孙》小院闲窗春色深，重帘未卷影沈沈。倚楼无语理瑶琴。远岫出山催薄暮，细风吹雨弄轻阴。梨花欲谢恐难禁。——《浣溪沙》淡荡春光寒食天，玉炉沈水袅残烟。梦回山枕隐花钿。海燕未来人斗草，江梅已过柳生绵。黄昏疏雨湿秋千。——《浣溪沙》莫许杯深琥珀浓，未成沈醉意先融。疏钟己应晚来风。瑞脑香消魂梦断，辟寒金小髻鬟松。醒时空对烛花红。——《浣溪沙》蹴罢秋千，起来慵整纤纤手。露浓花瘦，薄汗轻衣透。见有人来，袜刬金钗溜。和羞走，倚门回首，却把青梅嗅。——《点绛唇》禁幄低张，雕栏巧护，就中独占残春。客华淡伫，绰约俱见天真。待得群花过後，一番风露晓妆新。妖娆态，妒风笑月，长殢东君。东城边，南陌上，正日烘池馆，竞走香轮。绮筵散日，谁人可继芳尘？更好明光宫殿，几枝先近日边匀。金尊倒，拚了尽烛，不管黄昏。——《庆清明》……未完待续]]></content>
      <tags>
        <tag>阅读</tag>
        <tag>诗歌</tag>
        <tag>生平</tag>
        <tag>李清照</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解Linux内核札记]]></title>
    <url>%2Fposts%2F2019%2F9%2F21%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3linux%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[当我们拿到Linux内核代码开始研究时，可以说茫然无措。其规模之大，叫“覆压三百余里，隔离天日”似乎不为过；其关系错综复杂，叫“廊腰缦回，檐牙高啄，各抱地势，勾心斗角”也非言过其实。阿房宫在规模和结构上给人的震撼可能与Linux有异曲同工之妙。Linux是一个全新的世界，世界意味着博大精深，而新或许代表对旧的割舍和扬弃……Linux源代码官方网址：http://www.kernel.org/安装目录1/usr/src/linuxLinux的竞争力：单块结构的内核编译并静态连接的传统Unix内核内核线程多线程应用程序支持抢占式内核文件系统STREAMSLinux的优势Linux是免费的Linux所有成分都可以充分地定制Linux可以运行在低档、便宜的硬件平台上Linux是强大的Linux的开发者都是…非常出色的程序员Linux内核非常小，而且紧凑Linux与很多通用操作系统高度兼容Linux有很好的技术支持Linux试图在硬件无关的源代码和硬件相关的源代码之间，为了做到这一点，在arch和include目录下包含了23个子目录，以对应Linux所支持的不同硬件平台。如：alpha—HP的alpha工作站arm—基于ARM处理器的计算机和嵌入式设备x86_64—基于AMD 的64位微处理器的工作站um—用户态的Linux，允许开发者在用户态运行内核的虚拟平台Linux版本：前两位为版本号，第三位为发布号，第四位表示带有不同补丁的内核版本操作系统基本概念使用术语“操作系统”作为“内核”的同义词。操作系统必须完成两个主要目标：与硬件部分交互，为包含在硬件平台上的所有低层可编程部件提供服务。为运行在计算机系统的应用程序提供执行环境。]]></content>
      <tags>
        <tag>源码</tag>
        <tag>Linux</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[偷影子的人札记]]></title>
    <url>%2Fposts%2F2019%2F9%2F8%2F%E5%81%B7%E5%BD%B1%E5%AD%90%E7%9A%84%E4%BA%BA%E6%9C%AD%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[我的童年就在那里，带点忧愁又带点悲痛，在这外省的小城市里，我拼命等着伊丽莎白垂怜而看我一眼，在绝望中等待长大。为每一个你所偷来的影子找到点亮生命的小光芒，为他们找回隐匿的记忆拼图，这便是我们对你的全部请托。爱情里最需要的，是想象力。每个人必须用尽和全部的想象力来塑造对方，并丝毫不向现实低头。那么，当双方的幻想相遇……就再也没有比这更美的景象了。——Romain Gar这部作品完美展现了马克李维温柔风趣的写作风格，有催人泪下的亲情、浪漫感人的爱情和不离不弃的友情，清新浪漫的气息和温柔感人的故事相互交织，带给读者笑中带泪的阅读感受，是一部唤醒童年回忆和内心梦想的温情疗愈小说。]]></content>
      <categories>
        <category>外国文学</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>文艺</tag>
        <tag>童年</tag>
        <tag>Marc Levy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[诗人毛泽东札记]]></title>
    <url>%2Fposts%2F2019%2F9%2F7%2F%E8%AF%97%E4%BA%BA%E6%AF%9B%E6%B3%BD%E4%B8%9C%E6%9C%AD%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[中国，一个像诗一样美丽的国家，一个自古至今充满着无数诗歌的地方。北国风光，千里冰封，万里雪飘。望长城内外惟余莽莽，大河上下顿失滔滔，山舞银蛇原驰蜡象，欲与天公试比高！中国人民的一代领袖毛泽东，于繁忙的政治、军事工作之外，吟诗填词，乃其馀(yú)事。但从他小时候熟读诗云子曰之日起，到他逝世前在后花园低吟“今我来兮，杨柳依依”之时止，诵习、评述与创作构成了他的整个诗词人生……]]></content>
      <categories>
        <category>传记</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>诗歌</tag>
        <tag>生平</tag>
        <tag>毛泽东</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文化苦旅札记]]></title>
    <url>%2Fposts%2F2019%2F9%2F7%2F%E6%96%87%E5%8C%96%E8%8B%A6%E6%97%85%E6%9C%AD%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[莫高窟大门外，有一条河，过河有一溜空地，高高低低建着几座僧人圆寂塔。塔呈圆形，状近葫芦，外敷白色。从几座坍弛的来看，塔心竖一木桩，四周以黄泥塑成，基座垒以青砖。历来主持莫高窟的僧侣都不富裕，从这里也可找见证明。夕阳西下，朔风凛冽，这个破落的塔群更显得悲凉。有一座塔，由于修建年代较近，保存得较为完整。塔身有碑文，移步读去，猛然一惊……]]></content>
      <categories>
        <category>专著</category>
      </categories>
      <tags>
        <tag>阅读</tag>
        <tag>余秋雨</tag>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2F2019%2F9%2F6%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: DeploymentCommon Command12345$ hexo clean #清理之前生成的内容，即public文件$ hexo g #生成静态文件$ hexo d #部署$ hexo s #启动本地服务，可以通过http://localhost:4000查看$ hexo s --debug #使用debug模式启动服务How to create my blog1234567891011Open git BashEnter the following command to create an article, where title is the title of the article$ hexo new "title"Then you will find that a "title. md" is generated in the source\ posts directory, and you can write your own blog in this file!Once you have written it, just follow the steps mentioned above.Add &lt;!--more--&gt; and you can see a part of article.]]></content>
  </entry>
</search>
